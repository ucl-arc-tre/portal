// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"github.com/gin-gonic/gin"
)

// Defines values for ProfileTrainingUpdateKind.
const (
	Nhsd ProfileTrainingUpdateKind = "nhsd"
)

// Agreement defines model for Agreement.
type Agreement struct {
	// Id UUID of the agreement
	Id   string `json:"id"`
	Text string `json:"text"`
}

// AgreementConfirmation defines model for AgreementConfirmation.
type AgreementConfirmation struct {
	// AgreementId UUID of the agreement that has been agreed to
	AgreementId string `json:"agreement_id"`
}

// ConfirmedAgreement defines model for ConfirmedAgreement.
type ConfirmedAgreement struct {
	// AgreementType Type of agreement that was confirmed
	AgreementType string `json:"agreement_type"`

	// ConfirmedAt Time in RFC3339 format at which the agreement was confirmed
	ConfirmedAt string `json:"confirmed_at"`
}

// ProfileAgreements defines model for ProfileAgreements.
type ProfileAgreements struct {
	ConfirmedAgreements []ConfirmedAgreement `json:"confirmed_agreements"`
}

// ProfileResponse defines model for ProfileResponse.
type ProfileResponse struct {
	Roles    []string `json:"roles"`
	Username string   `json:"username"`
}

// ProfileTrainingResponse defines model for ProfileTrainingResponse.
type ProfileTrainingResponse struct {
	// CertificateIsValid Is the certificate valid
	CertificateIsValid bool `json:"certificate_is_valid"`

	// CertificateMessage Reason why the training certificate is valid/invalid
	CertificateMessage string `json:"certificate_message"`
}

// ProfileTrainingUpdate defines model for ProfileTrainingUpdate.
type ProfileTrainingUpdate struct {
	// CertficateContentPdfBase64 Base64 encoded PDF file data of the certificate
	CertficateContentPdfBase64 string                    `json:"certficate_content_pdf_base64"`
	Kind                       ProfileTrainingUpdateKind `json:"kind"`
}

// ProfileTrainingUpdateKind defines model for ProfileTrainingUpdate.Kind.
type ProfileTrainingUpdateKind string

// PostProfileAgreementsJSONRequestBody defines body for PostProfileAgreements for application/json ContentType.
type PostProfileAgreementsJSONRequestBody = AgreementConfirmation

// PostProfileTrainingNhsdJSONRequestBody defines body for PostProfileTrainingNhsd for application/json ContentType.
type PostProfileTrainingNhsdJSONRequestBody = ProfileTrainingUpdate

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /agreements/approved-researcher)
	GetAgreementsApprovedResearcher(c *gin.Context)

	// (GET /profile)
	GetProfile(c *gin.Context)

	// (GET /profile/agreements)
	GetProfileAgreements(c *gin.Context)

	// (POST /profile/agreements)
	PostProfileAgreements(c *gin.Context)

	// (POST /profile/training/nhsd)
	PostProfileTrainingNhsd(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetAgreementsApprovedResearcher operation middleware
func (siw *ServerInterfaceWrapper) GetAgreementsApprovedResearcher(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAgreementsApprovedResearcher(c)
}

// GetProfile operation middleware
func (siw *ServerInterfaceWrapper) GetProfile(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetProfile(c)
}

// GetProfileAgreements operation middleware
func (siw *ServerInterfaceWrapper) GetProfileAgreements(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetProfileAgreements(c)
}

// PostProfileAgreements operation middleware
func (siw *ServerInterfaceWrapper) PostProfileAgreements(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostProfileAgreements(c)
}

// PostProfileTrainingNhsd operation middleware
func (siw *ServerInterfaceWrapper) PostProfileTrainingNhsd(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostProfileTrainingNhsd(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/agreements/approved-researcher", wrapper.GetAgreementsApprovedResearcher)
	router.GET(options.BaseURL+"/profile", wrapper.GetProfile)
	router.GET(options.BaseURL+"/profile/agreements", wrapper.GetProfileAgreements)
	router.POST(options.BaseURL+"/profile/agreements", wrapper.PostProfileAgreements)
	router.POST(options.BaseURL+"/profile/training/nhsd", wrapper.PostProfileTrainingNhsd)
}
