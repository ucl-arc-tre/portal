// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package openapi

import (
	"fmt"
	"net/http"

	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// Defines values for AgreementType.
const (
	AgreementTypeApprovedResearcher AgreementType = "approved-researcher"
	AgreementTypeStudyOwner         AgreementType = "study-owner"
)

// Defines values for AssetClassificationImpact.
const (
	Confidential       AssetClassificationImpact = "Confidential"
	HighlyConfidential AssetClassificationImpact = "Highly confidential"
	Public             AssetClassificationImpact = "Public"
)

// Defines values for AssetProtection.
const (
	Anonymisation                             AssetProtection = "anonymisation"
	IdentifiableLowConfidencePseudonymisation AssetProtection = "identifiable_low_confidence_pseudonymisation"
)

// Defines values for AssetStatus.
const (
	Active    AssetStatus = "Active"
	Awaiting  AssetStatus = "Awaiting"
	Destroyed AssetStatus = "Destroyed"
)

// Defines values for AuthRoles.
const (
	AuthRolesAdmin              AuthRoles = "admin"
	AuthRolesApprovedResearcher AuthRoles = "approved-researcher"
	AuthRolesBase               AuthRoles = "base"
)

// Defines values for StudyApprovalStatus.
const (
	Approved   StudyApprovalStatus = "Approved"
	Incomplete StudyApprovalStatus = "Incomplete"
	Pending    StudyApprovalStatus = "Pending"
	Rejected   StudyApprovalStatus = "Rejected"
)

// Defines values for TrainingKind.
const (
	TrainingKindNhsd TrainingKind = "training_kind_nhsd"
)

// Agreement defines model for Agreement.
type Agreement struct {
	// Id UUID of the agreement
	Id   string `json:"id"`
	Text string `json:"text"`
}

// AgreementConfirmation defines model for AgreementConfirmation.
type AgreementConfirmation struct {
	// AgreementId UUID of the agreement that has been agreed to
	AgreementId string `json:"agreement_id"`
}

// AgreementType defines model for AgreementType.
type AgreementType string

// Asset A data asset representing a set of related data entities
type Asset struct {
	// AccessedByThirdParties Whether the asset is accessed by or governed by third parties
	AccessedByThirdParties bool `json:"accessed_by_third_parties"`

	// ClassificationImpact Classification level of the asset
	ClassificationImpact AssetClassificationImpact `json:"classification_impact"`

	// CreatedAt Time in RFC3339 format when the asset was created
	CreatedAt string `json:"created_at"`

	// Description Description of the asset
	Description string `json:"description"`

	// Expiry Retention expiry date of the asset
	Expiry string `json:"expiry"`

	// Format Format of the asset
	Format string `json:"format"`

	// HasDspt Whether there is an up to date Data Security & Protection Toolkit in place
	HasDspt bool `json:"has_dspt"`

	// Id Unique identifier for the asset
	Id string `json:"id"`

	// LegalBasis Legal basis for holding the asset
	LegalBasis string `json:"legal_basis"`

	// Locations Storage locations and touchpoints for the asset
	Locations []string `json:"locations"`

	// Protection Type of protection applied to the asset
	Protection AssetProtection `json:"protection"`

	// Status Status of the asset
	Status AssetStatus `json:"status"`

	// StoredOutsideUkEea Whether the asset is stored or processed outside UK and EEA
	StoredOutsideUkEea bool `json:"stored_outside_uk_eea"`

	// ThirdPartyAgreement Third party agreement identifier if asset is governed by third parties
	ThirdPartyAgreement string `json:"third_party_agreement"`

	// Title Title of the asset
	Title string `json:"title"`

	// UpdatedAt Time in RFC3339 format when the asset was last updated
	UpdatedAt string `json:"updated_at"`
}

// AssetClassificationImpact Classification level of the asset
type AssetClassificationImpact string

// AssetProtection Type of protection applied to the asset
type AssetProtection string

// AssetStatus Status of the asset
type AssetStatus string

// Auth defines model for Auth.
type Auth struct {
	// IsStaff Whether the user is a valid UCL staff member
	IsStaff  bool        `json:"is_staff"`
	Roles    []AuthRoles `json:"roles"`
	Username string      `json:"username"`
}

// AuthRoles defines model for Auth.Roles.
type AuthRoles string

// ConfirmedAgreement defines model for ConfirmedAgreement.
type ConfirmedAgreement struct {
	AgreementType AgreementType `json:"agreement_type"`

	// ConfirmedAt Time in RFC3339 format at which the agreement was confirmed
	ConfirmedAt string `json:"confirmed_at"`
}

// Profile defines model for Profile.
type Profile struct {
	ChosenName string `json:"chosen_name"`
	Username   string `json:"username"`
}

// ProfileTraining defines model for ProfileTraining.
type ProfileTraining struct {
	// TrainingRecords List of all training records for the user
	TrainingRecords []TrainingRecord `json:"training_records"`
}

// ProfileTrainingResponse defines model for ProfileTrainingResponse.
type ProfileTrainingResponse struct {
	// CertificateIsValid Is the certificate valid
	CertificateIsValid *bool `json:"certificate_is_valid,omitempty"`

	// CertificateIssuedAt Time in RFC3339 format at which the the certificate was issued
	CertificateIssuedAt *string `json:"certificate_issued_at,omitempty"`

	// CertificateMessage Reason why the training certificate is valid/invalid
	CertificateMessage *string `json:"certificate_message,omitempty"`
}

// ProfileTrainingUpdate defines model for ProfileTrainingUpdate.
type ProfileTrainingUpdate struct {
	// CertificateContentPdfBase64 Base64 encoded PDF file data of the certificate
	CertificateContentPdfBase64 *string      `json:"certificate_content_pdf_base64,omitempty"`
	Kind                        TrainingKind `json:"kind"`
}

// ProfileUpdate defines model for ProfileUpdate.
type ProfileUpdate struct {
	ChosenName string `json:"chosen_name"`
}

// Study defines model for Study.
type Study struct {
	// AdditionalStudyAdminUsernames List of additional study administrator usernames (empty array if none)
	AdditionalStudyAdminUsernames []string `json:"additional_study_admin_usernames"`

	// ApprovalStatus Current approval status of the study
	ApprovalStatus StudyApprovalStatus `json:"approval_status"`

	// CagReference CAG reference number
	CagReference *string `json:"cag_reference,omitempty"`

	// CreatedAt Time in RFC3339 format when the study was created
	CreatedAt string `json:"created_at"`

	// DataControllerOrganisation The organisation acting as data controller for the study (e.g., "UCL" or custom organization name)
	DataControllerOrganisation string `json:"data_controller_organisation"`

	// DataProtectionNumber Full data protection registration number
	DataProtectionNumber *string `json:"data_protection_number,omitempty"`

	// Description Description of the study
	Description *string `json:"description,omitempty"`

	// Id Unique identifier for the study
	Id string `json:"id"`

	// InvolvesCag Whether Confidentiality Advisory Group approval is involved (seeking/have sought)
	InvolvesCag *bool `json:"involves_cag,omitempty"`

	// InvolvesDataProcessingOutsideEea Whether data is processed outside UK/EEA
	InvolvesDataProcessingOutsideEea *bool `json:"involves_data_processing_outside_eea,omitempty"`

	// InvolvesEthicsApproval Whether Research Ethics Committee approval is involved (seeking/have sought)
	InvolvesEthicsApproval *bool `json:"involves_ethics_approval,omitempty"`

	// InvolvesExternalUsers Whether external users will have access to the study
	InvolvesExternalUsers *bool `json:"involves_external_users,omitempty"`

	// InvolvesHraApproval Whether Health Research Authority approval is involved (seeking/have sought)
	InvolvesHraApproval *bool `json:"involves_hra_approval,omitempty"`

	// InvolvesIndirectDataCollection Whether data is collected indirectly for the study (e.g. via a third party)
	InvolvesIndirectDataCollection *bool `json:"involves_indirect_data_collection,omitempty"`

	// InvolvesMnca Whether the HRA Model Non-Commercial Agreement is involved
	InvolvesMnca *bool `json:"involves_mnca,omitempty"`

	// InvolvesNhsEngland Whether NHS England is involved in the research
	InvolvesNhsEngland *bool `json:"involves_nhs_england,omitempty"`

	// InvolvesParticipantConsent Whether participant consent is involved (seeking/have sought)
	InvolvesParticipantConsent *bool `json:"involves_participant_consent,omitempty"`

	// InvolvesThirdParty Whether third party organizations are involved
	InvolvesThirdParty *bool `json:"involves_third_party,omitempty"`

	// InvolvesUclSponsorship Whether UCL sponsorship is involved (seeking/have sought)
	InvolvesUclSponsorship *bool `json:"involves_ucl_sponsorship,omitempty"`

	// IrasId IRAS ID if applicable
	IrasId *string `json:"iras_id,omitempty"`

	// IsDataProtectionOfficeRegistered Whether the study is registered with the UCL Data Protection Office
	IsDataProtectionOfficeRegistered *bool `json:"is_data_protection_office_registered,omitempty"`

	// IsNhsAssociated Whether the research is associated with NHS
	IsNhsAssociated *bool `json:"is_nhs_associated,omitempty"`

	// NhsEnglandReference NHS England DARS NIC number
	NhsEnglandReference *string `json:"nhs_england_reference,omitempty"`

	// OwnerUserId ID of the user who owns the study
	OwnerUserId *string `json:"owner_user_id,omitempty"`

	// RequiresDbs Whether a DBS check is required for staff
	RequiresDbs *bool `json:"requires_dbs,omitempty"`

	// RequiresDspt Whether NHS Data Security & Protection Toolkit is required
	RequiresDspt *bool `json:"requires_dspt,omitempty"`

	// Title Title of the study
	Title string `json:"title"`

	// UpdatedAt Time in RFC3339 format when the study was last updated
	UpdatedAt string `json:"updated_at"`
}

// StudyApprovalStatus Current approval status of the study
type StudyApprovalStatus string

// StudyBase Base study properties
type StudyBase struct {
	// AdditionalStudyAdminUsernames List of additional study administrator usernames (empty array if none)
	AdditionalStudyAdminUsernames []string `json:"additional_study_admin_usernames"`

	// CagReference CAG reference number
	CagReference *string `json:"cag_reference,omitempty"`

	// DataControllerOrganisation The organisation acting as data controller for the study (e.g., "UCL" or custom organization name)
	DataControllerOrganisation string `json:"data_controller_organisation"`

	// DataProtectionNumber Full data protection registration number
	DataProtectionNumber *string `json:"data_protection_number,omitempty"`

	// Description Description of the study
	Description *string `json:"description,omitempty"`

	// InvolvesCag Whether Confidentiality Advisory Group approval is involved (seeking/have sought)
	InvolvesCag *bool `json:"involves_cag,omitempty"`

	// InvolvesDataProcessingOutsideEea Whether data is processed outside UK/EEA
	InvolvesDataProcessingOutsideEea *bool `json:"involves_data_processing_outside_eea,omitempty"`

	// InvolvesEthicsApproval Whether Research Ethics Committee approval is involved (seeking/have sought)
	InvolvesEthicsApproval *bool `json:"involves_ethics_approval,omitempty"`

	// InvolvesExternalUsers Whether external users will have access to the study
	InvolvesExternalUsers *bool `json:"involves_external_users,omitempty"`

	// InvolvesHraApproval Whether Health Research Authority approval is involved (seeking/have sought)
	InvolvesHraApproval *bool `json:"involves_hra_approval,omitempty"`

	// InvolvesIndirectDataCollection Whether data is collected indirectly for the study (e.g. via a third party)
	InvolvesIndirectDataCollection *bool `json:"involves_indirect_data_collection,omitempty"`

	// InvolvesMnca Whether the HRA Model Non-Commercial Agreement is involved
	InvolvesMnca *bool `json:"involves_mnca,omitempty"`

	// InvolvesNhsEngland Whether NHS England is involved in the research
	InvolvesNhsEngland *bool `json:"involves_nhs_england,omitempty"`

	// InvolvesParticipantConsent Whether participant consent is involved (seeking/have sought)
	InvolvesParticipantConsent *bool `json:"involves_participant_consent,omitempty"`

	// InvolvesThirdParty Whether third party organizations are involved
	InvolvesThirdParty *bool `json:"involves_third_party,omitempty"`

	// InvolvesUclSponsorship Whether UCL sponsorship is involved (seeking/have sought)
	InvolvesUclSponsorship *bool `json:"involves_ucl_sponsorship,omitempty"`

	// IrasId IRAS ID if applicable
	IrasId *string `json:"iras_id,omitempty"`

	// IsDataProtectionOfficeRegistered Whether the study is registered with the UCL Data Protection Office
	IsDataProtectionOfficeRegistered *bool `json:"is_data_protection_office_registered,omitempty"`

	// IsNhsAssociated Whether the research is associated with NHS
	IsNhsAssociated *bool `json:"is_nhs_associated,omitempty"`

	// NhsEnglandReference NHS England DARS NIC number
	NhsEnglandReference *string `json:"nhs_england_reference,omitempty"`

	// OwnerUserId ID of the user who owns the study
	OwnerUserId *string `json:"owner_user_id,omitempty"`

	// RequiresDbs Whether a DBS check is required for staff
	RequiresDbs *bool `json:"requires_dbs,omitempty"`

	// RequiresDspt Whether NHS Data Security & Protection Toolkit is required
	RequiresDspt *bool `json:"requires_dspt,omitempty"`

	// Title Title of the study
	Title string `json:"title"`
}

// StudyCreateRequest Base study properties
type StudyCreateRequest = StudyBase

// StudyCreateValidationError defines model for StudyCreateValidationError.
type StudyCreateValidationError struct {
	// ErrorMessage Validation error message explaining why study creation failed
	ErrorMessage string `json:"error_message"`
}

// TrainingKind defines model for TrainingKind.
type TrainingKind string

// TrainingRecord defines model for TrainingRecord.
type TrainingRecord struct {
	// CompletedAt Time in RFC3339 format when the training was completed
	CompletedAt *string `json:"completed_at,omitempty"`

	// IsValid Whether this training certification is currently valid
	IsValid bool         `json:"is_valid"`
	Kind    TrainingKind `json:"kind"`
}

// User defines model for User.
type User struct {
	Id       string `json:"id"`
	Username string `json:"username"`
}

// UserAgreements defines model for UserAgreements.
type UserAgreements struct {
	ConfirmedAgreements []ConfirmedAgreement `json:"confirmed_agreements"`
}

// UserData defines model for UserData.
type UserData struct {
	Agreements     UserAgreements  `json:"agreements"`
	Roles          []string        `json:"roles"`
	TrainingRecord ProfileTraining `json:"training_record"`
	User           User            `json:"user"`
}

// UserTrainingUpdate defines model for UserTrainingUpdate.
type UserTrainingUpdate struct {
	// TrainingDate Time in RFC3339 format at which the the certificate was issued
	TrainingDate string       `json:"training_date"`
	TrainingKind TrainingKind `json:"training_kind"`
}

// PostUsersInviteJSONBody defines parameters for PostUsersInvite.
type PostUsersInviteJSONBody struct {
	// Email Email address of the person to be invited
	Email string `json:"email"`
}

// PostProfileJSONRequestBody defines body for PostProfile for application/json ContentType.
type PostProfileJSONRequestBody = ProfileUpdate

// PostProfileAgreementsJSONRequestBody defines body for PostProfileAgreements for application/json ContentType.
type PostProfileAgreementsJSONRequestBody = AgreementConfirmation

// PostProfileTrainingJSONRequestBody defines body for PostProfileTraining for application/json ContentType.
type PostProfileTrainingJSONRequestBody = ProfileTrainingUpdate

// PostStudiesJSONRequestBody defines body for PostStudies for application/json ContentType.
type PostStudiesJSONRequestBody = StudyCreateRequest

// PostStudiesStudyIdAssetsJSONRequestBody defines body for PostStudiesStudyIdAssets for application/json ContentType.
type PostStudiesStudyIdAssetsJSONRequestBody = Asset

// PostUsersInviteJSONRequestBody defines body for PostUsersInvite for application/json ContentType.
type PostUsersInviteJSONRequestBody PostUsersInviteJSONBody

// PostUsersUserIdTrainingJSONRequestBody defines body for PostUsersUserIdTraining for application/json ContentType.
type PostUsersUserIdTrainingJSONRequestBody = UserTrainingUpdate

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /agreements/{agreementType})
	GetAgreementsAgreementType(c *gin.Context, agreementType AgreementType)

	// (GET /auth)
	GetAuth(c *gin.Context)

	// (GET /profile)
	GetProfile(c *gin.Context)

	// (POST /profile)
	PostProfile(c *gin.Context)

	// (GET /profile/agreements)
	GetProfileAgreements(c *gin.Context)

	// (POST /profile/agreements)
	PostProfileAgreements(c *gin.Context)

	// (GET /profile/training)
	GetProfileTraining(c *gin.Context)

	// (POST /profile/training)
	PostProfileTraining(c *gin.Context)

	// (GET /studies)
	GetStudies(c *gin.Context)

	// (POST /studies)
	PostStudies(c *gin.Context)

	// (GET /studies/{studyId}/assets)
	GetStudiesStudyIdAssets(c *gin.Context, studyId string)

	// (POST /studies/{studyId}/assets)
	PostStudiesStudyIdAssets(c *gin.Context, studyId string)

	// (GET /study/{studyId})
	GetStudyStudyId(c *gin.Context, studyId string)

	// (GET /users)
	GetUsers(c *gin.Context)

	// (POST /users/approved-researchers/import/csv)
	PostUsersApprovedResearchersImportCsv(c *gin.Context)

	// (POST /users/invite)
	PostUsersInvite(c *gin.Context)

	// (POST /users/{userId}/training)
	PostUsersUserIdTraining(c *gin.Context, userId string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetAgreementsAgreementType operation middleware
func (siw *ServerInterfaceWrapper) GetAgreementsAgreementType(c *gin.Context) {

	var err error

	// ------------- Path parameter "agreementType" -------------
	var agreementType AgreementType

	err = runtime.BindStyledParameterWithOptions("simple", "agreementType", c.Param("agreementType"), &agreementType, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter agreementType: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAgreementsAgreementType(c, agreementType)
}

// GetAuth operation middleware
func (siw *ServerInterfaceWrapper) GetAuth(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAuth(c)
}

// GetProfile operation middleware
func (siw *ServerInterfaceWrapper) GetProfile(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetProfile(c)
}

// PostProfile operation middleware
func (siw *ServerInterfaceWrapper) PostProfile(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostProfile(c)
}

// GetProfileAgreements operation middleware
func (siw *ServerInterfaceWrapper) GetProfileAgreements(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetProfileAgreements(c)
}

// PostProfileAgreements operation middleware
func (siw *ServerInterfaceWrapper) PostProfileAgreements(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostProfileAgreements(c)
}

// GetProfileTraining operation middleware
func (siw *ServerInterfaceWrapper) GetProfileTraining(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetProfileTraining(c)
}

// PostProfileTraining operation middleware
func (siw *ServerInterfaceWrapper) PostProfileTraining(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostProfileTraining(c)
}

// GetStudies operation middleware
func (siw *ServerInterfaceWrapper) GetStudies(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetStudies(c)
}

// PostStudies operation middleware
func (siw *ServerInterfaceWrapper) PostStudies(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostStudies(c)
}

// GetStudiesStudyIdAssets operation middleware
func (siw *ServerInterfaceWrapper) GetStudiesStudyIdAssets(c *gin.Context) {

	var err error

	// ------------- Path parameter "studyId" -------------
	var studyId string

	err = runtime.BindStyledParameterWithOptions("simple", "studyId", c.Param("studyId"), &studyId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter studyId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetStudiesStudyIdAssets(c, studyId)
}

// PostStudiesStudyIdAssets operation middleware
func (siw *ServerInterfaceWrapper) PostStudiesStudyIdAssets(c *gin.Context) {

	var err error

	// ------------- Path parameter "studyId" -------------
	var studyId string

	err = runtime.BindStyledParameterWithOptions("simple", "studyId", c.Param("studyId"), &studyId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter studyId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostStudiesStudyIdAssets(c, studyId)
}

// GetStudyStudyId operation middleware
func (siw *ServerInterfaceWrapper) GetStudyStudyId(c *gin.Context) {

	var err error

	// ------------- Path parameter "studyId" -------------
	var studyId string

	err = runtime.BindStyledParameterWithOptions("simple", "studyId", c.Param("studyId"), &studyId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter studyId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetStudyStudyId(c, studyId)
}

// GetUsers operation middleware
func (siw *ServerInterfaceWrapper) GetUsers(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetUsers(c)
}

// PostUsersApprovedResearchersImportCsv operation middleware
func (siw *ServerInterfaceWrapper) PostUsersApprovedResearchersImportCsv(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostUsersApprovedResearchersImportCsv(c)
}

// PostUsersInvite operation middleware
func (siw *ServerInterfaceWrapper) PostUsersInvite(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostUsersInvite(c)
}

// PostUsersUserIdTraining operation middleware
func (siw *ServerInterfaceWrapper) PostUsersUserIdTraining(c *gin.Context) {

	var err error

	// ------------- Path parameter "userId" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "userId", c.Param("userId"), &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter userId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostUsersUserIdTraining(c, userId)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/agreements/:agreementType", wrapper.GetAgreementsAgreementType)
	router.GET(options.BaseURL+"/auth", wrapper.GetAuth)
	router.GET(options.BaseURL+"/profile", wrapper.GetProfile)
	router.POST(options.BaseURL+"/profile", wrapper.PostProfile)
	router.GET(options.BaseURL+"/profile/agreements", wrapper.GetProfileAgreements)
	router.POST(options.BaseURL+"/profile/agreements", wrapper.PostProfileAgreements)
	router.GET(options.BaseURL+"/profile/training", wrapper.GetProfileTraining)
	router.POST(options.BaseURL+"/profile/training", wrapper.PostProfileTraining)
	router.GET(options.BaseURL+"/studies", wrapper.GetStudies)
	router.POST(options.BaseURL+"/studies", wrapper.PostStudies)
	router.GET(options.BaseURL+"/studies/:studyId/assets", wrapper.GetStudiesStudyIdAssets)
	router.POST(options.BaseURL+"/studies/:studyId/assets", wrapper.PostStudiesStudyIdAssets)
	router.GET(options.BaseURL+"/study/:studyId", wrapper.GetStudyStudyId)
	router.GET(options.BaseURL+"/users", wrapper.GetUsers)
	router.POST(options.BaseURL+"/users/approved-researchers/import/csv", wrapper.PostUsersApprovedResearchersImportCsv)
	router.POST(options.BaseURL+"/users/invite", wrapper.PostUsersInvite)
	router.POST(options.BaseURL+"/users/:userId/training", wrapper.PostUsersUserIdTraining)
}
