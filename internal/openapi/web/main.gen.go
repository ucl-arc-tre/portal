// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"fmt"
	"net/http"

	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// Defines values for AgreementType.
const (
	AgreementTypeApprovedResearcher AgreementType = "approved-researcher"
	AgreementTypeStudyOwner         AgreementType = "study-owner"
)

// Defines values for AuthRoles.
const (
	AuthRolesAdmin              AuthRoles = "admin"
	AuthRolesApprovedResearcher AuthRoles = "approved-researcher"
	AuthRolesBase               AuthRoles = "base"
)

// Defines values for TrainingKind.
const (
	TrainingKindNhsd TrainingKind = "training_kind_nhsd"
)

// Agreement defines model for Agreement.
type Agreement struct {
	// Id UUID of the agreement
	Id   string `json:"id"`
	Text string `json:"text"`
}

// AgreementConfirmation defines model for AgreementConfirmation.
type AgreementConfirmation struct {
	// AgreementId UUID of the agreement that has been agreed to
	AgreementId string `json:"agreement_id"`
}

// AgreementType defines model for AgreementType.
type AgreementType string

// AgreementsList defines model for AgreementsList.
type AgreementsList struct {
	ConfirmedAgreements []ConfirmedAgreement `json:"confirmed_agreements"`
}

// Auth defines model for Auth.
type Auth struct {
	Id       string      `json:"id"`
	Roles    []AuthRoles `json:"roles"`
	Username string      `json:"username"`
}

// AuthRoles defines model for Auth.Roles.
type AuthRoles string

// ConfirmedAgreement defines model for ConfirmedAgreement.
type ConfirmedAgreement struct {
	AgreementType AgreementType `json:"agreement_type"`

	// ConfirmedAt Time in RFC3339 format at which the agreement was confirmed
	ConfirmedAt string `json:"confirmed_at"`
}

// TrainingKind defines model for TrainingKind.
type TrainingKind string

// TrainingRecord defines model for TrainingRecord.
type TrainingRecord struct {
	// CompletedAt Time in RFC3339 format when the training was completed
	CompletedAt *string `json:"completed_at,omitempty"`

	// IsValid Whether this training certification is currently valid
	IsValid bool         `json:"is_valid"`
	Kind    TrainingKind `json:"kind"`
}

// TrainingValidFromDate defines model for TrainingValidFromDate.
type TrainingValidFromDate struct {
	// TrainingValidFromDate Time in RFC3339 format representing the date from which the training is valid
	TrainingValidFromDate string `json:"training_valid_from_date"`
}

// User defines model for User.
type User struct {
	Id       string `json:"id"`
	Username string `json:"username"`
}

// UserIdentity defines model for UserIdentity.
type UserIdentity struct {
	ChosenName string `json:"chosen_name"`
}

// UserIdentityResponse defines model for UserIdentityResponse.
type UserIdentityResponse struct {
	ChosenName string `json:"chosen_name"`
	Username   string `json:"username"`
}

// UserProfile Complete profile information for a user including identity, roles, agreements, and training status
type UserProfile struct {
	Agreements     AgreementsList     `json:"agreements"`
	Roles          []string           `json:"roles"`
	TrainingRecord UserTrainingStatus `json:"training_record"`
	User           User               `json:"user"`
}

// UserProfiles List of user profiles accessible to admin users
type UserProfiles = []UserProfile

// UserTrainingResponse defines model for UserTrainingResponse.
type UserTrainingResponse struct {
	// CertificateIsValid Is the certificate valid
	CertificateIsValid *bool `json:"certificate_is_valid,omitempty"`

	// CertificateIssuedAt Time in RFC3339 format at which the certificate was issued
	CertificateIssuedAt *string `json:"certificate_issued_at,omitempty"`

	// CertificateMessage Reason why the training certificate is valid/invalid
	CertificateMessage *string `json:"certificate_message,omitempty"`
}

// UserTrainingStatus defines model for UserTrainingStatus.
type UserTrainingStatus struct {
	// TrainingRecords List of all training records for the user
	TrainingRecords []TrainingRecord `json:"training_records"`
}

// UserTrainingUpdateBody defines model for UserTrainingUpdateBody.
type UserTrainingUpdateBody struct {
	// CertificateContentPdfBase64 Base64 encoded PDF file data of the certificate
	CertificateContentPdfBase64 *string      `json:"certificate_content_pdf_base64,omitempty"`
	Kind                        TrainingKind `json:"kind"`
}

// ConfirmAgreementJSONRequestBody defines body for ConfirmAgreement for application/json ContentType.
type ConfirmAgreementJSONRequestBody = AgreementConfirmation

// UpdateTrainingRecordJSONRequestBody defines body for UpdateTrainingRecord for application/json ContentType.
type UpdateTrainingRecordJSONRequestBody = UserTrainingUpdateBody

// UpdateTrainingValidityDateJSONRequestBody defines body for UpdateTrainingValidityDate for application/json ContentType.
type UpdateTrainingValidityDateJSONRequestBody = TrainingValidFromDate

// UpdateChosenNameJSONRequestBody defines body for UpdateChosenName for application/json ContentType.
type UpdateChosenNameJSONRequestBody = UserIdentity

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /admin/approved-researchers/import/csv)
	ImportApprovedResearchersCsv(c *gin.Context)

	// (GET /agreements)
	GetAllConfirmedAgreements(c *gin.Context)

	// (POST /agreements)
	ConfirmAgreement(c *gin.Context)

	// (GET /agreements/approved-researcher)
	GetAgreementsTextApprovedResearcher(c *gin.Context)

	// (GET /auth)
	GetAuth(c *gin.Context)

	// (GET /training/{userId})
	GetTrainingRecord(c *gin.Context, userId string)

	// (POST /training/{userId})
	UpdateTrainingRecord(c *gin.Context, userId string)

	// (PUT /training/{userId}/{trainingKind})
	UpdateTrainingValidityDate(c *gin.Context, userId string, trainingKind TrainingKind)

	// (GET /user/identity)
	GetUserIdentity(c *gin.Context)

	// (POST /user/identity)
	UpdateChosenName(c *gin.Context)

	// (GET /users)
	GetAllUsers(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// ImportApprovedResearchersCsv operation middleware
func (siw *ServerInterfaceWrapper) ImportApprovedResearchersCsv(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ImportApprovedResearchersCsv(c)
}

// GetAllConfirmedAgreements operation middleware
func (siw *ServerInterfaceWrapper) GetAllConfirmedAgreements(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAllConfirmedAgreements(c)
}

// ConfirmAgreement operation middleware
func (siw *ServerInterfaceWrapper) ConfirmAgreement(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ConfirmAgreement(c)
}

// GetAgreementsTextApprovedResearcher operation middleware
func (siw *ServerInterfaceWrapper) GetAgreementsTextApprovedResearcher(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAgreementsTextApprovedResearcher(c)
}

// GetAuth operation middleware
func (siw *ServerInterfaceWrapper) GetAuth(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAuth(c)
}

// GetTrainingRecord operation middleware
func (siw *ServerInterfaceWrapper) GetTrainingRecord(c *gin.Context) {

	var err error

	// ------------- Path parameter "userId" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "userId", c.Param("userId"), &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter userId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetTrainingRecord(c, userId)
}

// UpdateTrainingRecord operation middleware
func (siw *ServerInterfaceWrapper) UpdateTrainingRecord(c *gin.Context) {

	var err error

	// ------------- Path parameter "userId" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "userId", c.Param("userId"), &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter userId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateTrainingRecord(c, userId)
}

// UpdateTrainingValidityDate operation middleware
func (siw *ServerInterfaceWrapper) UpdateTrainingValidityDate(c *gin.Context) {

	var err error

	// ------------- Path parameter "userId" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "userId", c.Param("userId"), &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter userId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "trainingKind" -------------
	var trainingKind TrainingKind

	err = runtime.BindStyledParameterWithOptions("simple", "trainingKind", c.Param("trainingKind"), &trainingKind, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter trainingKind: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateTrainingValidityDate(c, userId, trainingKind)
}

// GetUserIdentity operation middleware
func (siw *ServerInterfaceWrapper) GetUserIdentity(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetUserIdentity(c)
}

// UpdateChosenName operation middleware
func (siw *ServerInterfaceWrapper) UpdateChosenName(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateChosenName(c)
}

// GetAllUsers operation middleware
func (siw *ServerInterfaceWrapper) GetAllUsers(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAllUsers(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/admin/approved-researchers/import/csv", wrapper.ImportApprovedResearchersCsv)
	router.GET(options.BaseURL+"/agreements", wrapper.GetAllConfirmedAgreements)
	router.POST(options.BaseURL+"/agreements", wrapper.ConfirmAgreement)
	router.GET(options.BaseURL+"/agreements/approved-researcher", wrapper.GetAgreementsTextApprovedResearcher)
	router.GET(options.BaseURL+"/auth", wrapper.GetAuth)
	router.GET(options.BaseURL+"/training/:userId", wrapper.GetTrainingRecord)
	router.POST(options.BaseURL+"/training/:userId", wrapper.UpdateTrainingRecord)
	router.PUT(options.BaseURL+"/training/:userId/:trainingKind", wrapper.UpdateTrainingValidityDate)
	router.GET(options.BaseURL+"/user/identity", wrapper.GetUserIdentity)
	router.POST(options.BaseURL+"/user/identity", wrapper.UpdateChosenName)
	router.GET(options.BaseURL+"/users", wrapper.GetAllUsers)
}
