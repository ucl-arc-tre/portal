// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"fmt"
	"net/http"

	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// Defines values for AgreementType.
const (
	AgreementTypeApprovedResearcher AgreementType = "approved-researcher"
	AgreementTypeStudyOwner         AgreementType = "study-owner"
)

// Defines values for AuthRoles.
const (
	AuthRolesAdmin              AuthRoles = "admin"
	AuthRolesApprovedResearcher AuthRoles = "approved-researcher"
	AuthRolesBase               AuthRoles = "base"
)

// Defines values for ProfileTrainingUpdateKind.
const (
	ProfileTrainingUpdateKindTrainingKindNhsd ProfileTrainingUpdateKind = "training_kind_nhsd"
)

// Defines values for TrainingKind.
const (
	TrainingKindTrainingKindNhsd TrainingKind = "training_kind_nhsd"
)

// Agreement defines model for Agreement.
type Agreement struct {
	// Id UUID of the agreement
	Id   string `json:"id"`
	Text string `json:"text"`
}

// AgreementConfirmation defines model for AgreementConfirmation.
type AgreementConfirmation struct {
	// AgreementId UUID of the agreement that has been agreed to
	AgreementId string `json:"agreement_id"`
}

// AgreementType defines model for AgreementType.
type AgreementType string

// Auth defines model for Auth.
type Auth struct {
	Roles    []AuthRoles `json:"roles"`
	Username string      `json:"username"`
}

// AuthRoles defines model for Auth.Roles.
type AuthRoles string

// ConfirmedAgreement defines model for ConfirmedAgreement.
type ConfirmedAgreement struct {
	AgreementType AgreementType `json:"agreement_type"`

	// ConfirmedAt Time in RFC3339 format at which the agreement was confirmed
	ConfirmedAt string `json:"confirmed_at"`
}

// People defines model for People.
type People = []Person

// Person defines model for Person.
type Person struct {
	Agreements     ProfileAgreements     `json:"agreements"`
	Roles          []string              `json:"roles"`
	TrainingRecord PersonTrainingRecords `json:"training_record"`
	User           User                  `json:"user"`
}

// PersonTrainingRecords defines model for PersonTrainingRecords.
type PersonTrainingRecords = []TrainingRecord

// PersonUpdate defines model for PersonUpdate.
type PersonUpdate struct {
	// TrainingDate Time in RFC3339 format at which the the certificate was issued
	TrainingDate *string       `json:"training_date,omitempty"`
	TrainingKind *TrainingKind `json:"training_kind,omitempty"`
}

// ProfileAgreements defines model for ProfileAgreements.
type ProfileAgreements struct {
	ConfirmedAgreements []ConfirmedAgreement `json:"confirmed_agreements"`
}

// ProfileResponse defines model for ProfileResponse.
type ProfileResponse struct {
	ChosenName string `json:"chosen_name"`
	Username   string `json:"username"`
}

// ProfileTrainingResponse defines model for ProfileTrainingResponse.
type ProfileTrainingResponse struct {
	// CertificateIsValid Is the certificate valid
	CertificateIsValid *bool `json:"certificate_is_valid,omitempty"`

	// CertificateIssuedAt Time in RFC3339 format at which the the certificate was issued
	CertificateIssuedAt *string `json:"certificate_issued_at,omitempty"`

	// CertificateMessage Reason why the training certificate is valid/invalid
	CertificateMessage *string `json:"certificate_message,omitempty"`
}

// ProfileTrainingUpdate defines model for ProfileTrainingUpdate.
type ProfileTrainingUpdate struct {
	// CertificateContentPdfBase64 Base64 encoded PDF file data of the certificate
	CertificateContentPdfBase64 *string                   `json:"certificate_content_pdf_base64,omitempty"`
	Kind                        ProfileTrainingUpdateKind `json:"kind"`
}

// ProfileTrainingUpdateKind defines model for ProfileTrainingUpdate.Kind.
type ProfileTrainingUpdateKind string

// ProfileUpdate defines model for ProfileUpdate.
type ProfileUpdate struct {
	ChosenName string `json:"chosen_name"`
}

// TrainingKind defines model for TrainingKind.
type TrainingKind string

// TrainingRecord defines model for TrainingRecord.
type TrainingRecord struct {
	CompletedAt  *string       `json:"completed_at,omitempty"`
	TrainingKind *TrainingKind `json:"training_kind,omitempty"`
}

// User defines model for User.
type User struct {
	Id       string `json:"id"`
	Username string `json:"username"`
}

// PostPeopleUpdateParams defines parameters for PostPeopleUpdate.
type PostPeopleUpdateParams struct {
	Id string `form:"id" json:"id"`
}

// PostPeopleUpdateJSONRequestBody defines body for PostPeopleUpdate for application/json ContentType.
type PostPeopleUpdateJSONRequestBody = PersonUpdate

// PostProfileJSONRequestBody defines body for PostProfile for application/json ContentType.
type PostProfileJSONRequestBody = ProfileUpdate

// PostProfileAgreementsJSONRequestBody defines body for PostProfileAgreements for application/json ContentType.
type PostProfileAgreementsJSONRequestBody = AgreementConfirmation

// PostProfileTrainingJSONRequestBody defines body for PostProfileTraining for application/json ContentType.
type PostProfileTrainingJSONRequestBody = ProfileTrainingUpdate

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /agreements/approved-researcher)
	GetAgreementsApprovedResearcher(c *gin.Context)

	// (GET /auth)
	GetAuth(c *gin.Context)

	// (GET /people)
	GetPeople(c *gin.Context)

	// (POST /people/update)
	PostPeopleUpdate(c *gin.Context, params PostPeopleUpdateParams)

	// (GET /profile)
	GetProfile(c *gin.Context)

	// (POST /profile)
	PostProfile(c *gin.Context)

	// (GET /profile/agreements)
	GetProfileAgreements(c *gin.Context)

	// (POST /profile/agreements)
	PostProfileAgreements(c *gin.Context)

	// (POST /profile/training)
	PostProfileTraining(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetAgreementsApprovedResearcher operation middleware
func (siw *ServerInterfaceWrapper) GetAgreementsApprovedResearcher(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAgreementsApprovedResearcher(c)
}

// GetAuth operation middleware
func (siw *ServerInterfaceWrapper) GetAuth(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAuth(c)
}

// GetPeople operation middleware
func (siw *ServerInterfaceWrapper) GetPeople(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetPeople(c)
}

// PostPeopleUpdate operation middleware
func (siw *ServerInterfaceWrapper) PostPeopleUpdate(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PostPeopleUpdateParams

	// ------------- Required query parameter "id" -------------

	if paramValue := c.Query("id"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument id is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "id", c.Request.URL.Query(), &params.Id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostPeopleUpdate(c, params)
}

// GetProfile operation middleware
func (siw *ServerInterfaceWrapper) GetProfile(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetProfile(c)
}

// PostProfile operation middleware
func (siw *ServerInterfaceWrapper) PostProfile(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostProfile(c)
}

// GetProfileAgreements operation middleware
func (siw *ServerInterfaceWrapper) GetProfileAgreements(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetProfileAgreements(c)
}

// PostProfileAgreements operation middleware
func (siw *ServerInterfaceWrapper) PostProfileAgreements(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostProfileAgreements(c)
}

// PostProfileTraining operation middleware
func (siw *ServerInterfaceWrapper) PostProfileTraining(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostProfileTraining(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/agreements/approved-researcher", wrapper.GetAgreementsApprovedResearcher)
	router.GET(options.BaseURL+"/auth", wrapper.GetAuth)
	router.GET(options.BaseURL+"/people", wrapper.GetPeople)
	router.POST(options.BaseURL+"/people/update", wrapper.PostPeopleUpdate)
	router.GET(options.BaseURL+"/profile", wrapper.GetProfile)
	router.POST(options.BaseURL+"/profile", wrapper.PostProfile)
	router.GET(options.BaseURL+"/profile/agreements", wrapper.GetProfileAgreements)
	router.POST(options.BaseURL+"/profile/agreements", wrapper.PostProfileAgreements)
	router.POST(options.BaseURL+"/profile/training", wrapper.PostProfileTraining)
}
