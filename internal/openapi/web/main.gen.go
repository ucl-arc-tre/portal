// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"fmt"
	"net/http"

	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// Defines values for AgreementType.
const (
	AgreementTypeApprovedResearcher AgreementType = "approved-researcher"
	AgreementTypeStudyOwner         AgreementType = "study-owner"
)

// Defines values for AuthRoles.
const (
	AuthRolesAdmin              AuthRoles = "admin"
	AuthRolesApprovedResearcher AuthRoles = "approved-researcher"
	AuthRolesBase               AuthRoles = "base"
)

// Defines values for TrainingKind.
const (
	TrainingKindNhsd TrainingKind = "training_kind_nhsd"
)

// Agreement defines model for Agreement.
type Agreement struct {
	// Id UUID of the agreement
	Id   string `json:"id"`
	Text string `json:"text"`
}

// AgreementConfirmation defines model for AgreementConfirmation.
type AgreementConfirmation struct {
	// AgreementId UUID of the agreement that has been agreed to
	AgreementId string `json:"agreement_id"`
}

// AgreementType defines model for AgreementType.
type AgreementType string

// Auth defines model for Auth.
type Auth struct {
	Roles    []AuthRoles `json:"roles"`
	Username string      `json:"username"`
}

// AuthRoles defines model for Auth.Roles.
type AuthRoles string

// ConfirmedAgreement defines model for ConfirmedAgreement.
type ConfirmedAgreement struct {
	AgreementType AgreementType `json:"agreement_type"`

	// ConfirmedAt Time in RFC3339 format at which the agreement was confirmed
	ConfirmedAt string `json:"confirmed_at"`
}

// People defines model for People.
type People = []Person

// Person defines model for Person.
type Person struct {
	Agreements     ProfileAgreements     `json:"agreements"`
	Roles          []string              `json:"roles"`
	TrainingRecord ProfileTrainingStatus `json:"training_record"`
	User           User                  `json:"user"`
}

// ProfileAgreements defines model for ProfileAgreements.
type ProfileAgreements struct {
	ConfirmedAgreements []ConfirmedAgreement `json:"confirmed_agreements"`
}

// ProfileTrainingResponse defines model for ProfileTrainingResponse.
type ProfileTrainingResponse struct {
	// CertificateIsValid Is the certificate valid
	CertificateIsValid *bool `json:"certificate_is_valid,omitempty"`

	// CertificateIssuedAt Time in RFC3339 format at which the the certificate was issued
	CertificateIssuedAt *string `json:"certificate_issued_at,omitempty"`

	// CertificateMessage Reason why the training certificate is valid/invalid
	CertificateMessage *string `json:"certificate_message,omitempty"`
}

// ProfileTrainingStatus defines model for ProfileTrainingStatus.
type ProfileTrainingStatus struct {
	// TrainingRecords List of all training records for the user
	TrainingRecords []TrainingRecord `json:"training_records"`
}

// ProfileTrainingUpdate defines model for ProfileTrainingUpdate.
type ProfileTrainingUpdate struct {
	// CertificateContentPdfBase64 Base64 encoded PDF file data of the certificate
	CertificateContentPdfBase64 *string      `json:"certificate_content_pdf_base64,omitempty"`
	Kind                        TrainingKind `json:"kind"`
}

// ProfileUpdate defines model for ProfileUpdate.
type ProfileUpdate struct {
	ChosenName string `json:"chosen_name"`
}

// TrainingKind defines model for TrainingKind.
type TrainingKind string

// TrainingRecord defines model for TrainingRecord.
type TrainingRecord struct {
	// CompletedAt Time in RFC3339 format when the training was completed
	CompletedAt *string `json:"completed_at,omitempty"`

	// IsValid Whether this training certification is currently valid
	IsValid bool         `json:"is_valid"`
	Kind    TrainingKind `json:"kind"`
}

// TrainingValidFromDate defines model for TrainingValidFromDate.
type TrainingValidFromDate struct {
	// TrainingValidFromDate Time in RFC3339 format representing the date from which the training is valid
	TrainingValidFromDate string `json:"training_valid_from_date"`
}

// User defines model for User.
type User struct {
	Id       string `json:"id"`
	Username string `json:"username"`
}

// UserIdentityResponse defines model for UserIdentityResponse.
type UserIdentityResponse struct {
	ChosenName string `json:"chosen_name"`
	Username   string `json:"username"`
}

// PostProfileAgreementsJSONRequestBody defines body for PostProfileAgreements for application/json ContentType.
type PostProfileAgreementsJSONRequestBody = AgreementConfirmation

// PostProfileTrainingJSONRequestBody defines body for PostProfileTraining for application/json ContentType.
type PostProfileTrainingJSONRequestBody = ProfileTrainingUpdate

// UpdateUserTrainingDateJSONRequestBody defines body for UpdateUserTrainingDate for application/json ContentType.
type UpdateUserTrainingDateJSONRequestBody = TrainingValidFromDate

// PostUserIdentityJSONRequestBody defines body for PostUserIdentity for application/json ContentType.
type PostUserIdentityJSONRequestBody = ProfileUpdate

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /agreements/approved-researcher)
	GetAgreementsApprovedResearcher(c *gin.Context)

	// (GET /auth)
	GetAuth(c *gin.Context)

	// (POST /people/approved-researchers/import/csv)
	PostPeopleApprovedResearchersImportCsv(c *gin.Context)

	// (GET /profile/agreements)
	GetProfileAgreements(c *gin.Context)

	// (POST /profile/agreements)
	PostProfileAgreements(c *gin.Context)

	// (GET /profile/training)
	GetProfileTraining(c *gin.Context)

	// (POST /profile/training)
	PostProfileTraining(c *gin.Context)

	// (PUT /training/{userId}/{trainingKind})
	UpdateUserTrainingDate(c *gin.Context, userId string, trainingKind TrainingKind)

	// (GET /user/identity)
	GetUserIdentity(c *gin.Context)

	// (POST /user/identity)
	PostUserIdentity(c *gin.Context)

	// (GET /users)
	GetAllUsers(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetAgreementsApprovedResearcher operation middleware
func (siw *ServerInterfaceWrapper) GetAgreementsApprovedResearcher(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAgreementsApprovedResearcher(c)
}

// GetAuth operation middleware
func (siw *ServerInterfaceWrapper) GetAuth(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAuth(c)
}

// PostPeopleApprovedResearchersImportCsv operation middleware
func (siw *ServerInterfaceWrapper) PostPeopleApprovedResearchersImportCsv(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostPeopleApprovedResearchersImportCsv(c)
}

// GetProfileAgreements operation middleware
func (siw *ServerInterfaceWrapper) GetProfileAgreements(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetProfileAgreements(c)
}

// PostProfileAgreements operation middleware
func (siw *ServerInterfaceWrapper) PostProfileAgreements(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostProfileAgreements(c)
}

// GetProfileTraining operation middleware
func (siw *ServerInterfaceWrapper) GetProfileTraining(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetProfileTraining(c)
}

// PostProfileTraining operation middleware
func (siw *ServerInterfaceWrapper) PostProfileTraining(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostProfileTraining(c)
}

// UpdateUserTrainingDate operation middleware
func (siw *ServerInterfaceWrapper) UpdateUserTrainingDate(c *gin.Context) {

	var err error

	// ------------- Path parameter "userId" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "userId", c.Param("userId"), &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter userId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "trainingKind" -------------
	var trainingKind TrainingKind

	err = runtime.BindStyledParameterWithOptions("simple", "trainingKind", c.Param("trainingKind"), &trainingKind, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter trainingKind: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateUserTrainingDate(c, userId, trainingKind)
}

// GetUserIdentity operation middleware
func (siw *ServerInterfaceWrapper) GetUserIdentity(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetUserIdentity(c)
}

// PostUserIdentity operation middleware
func (siw *ServerInterfaceWrapper) PostUserIdentity(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostUserIdentity(c)
}

// GetAllUsers operation middleware
func (siw *ServerInterfaceWrapper) GetAllUsers(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAllUsers(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/agreements/approved-researcher", wrapper.GetAgreementsApprovedResearcher)
	router.GET(options.BaseURL+"/auth", wrapper.GetAuth)
	router.POST(options.BaseURL+"/people/approved-researchers/import/csv", wrapper.PostPeopleApprovedResearchersImportCsv)
	router.GET(options.BaseURL+"/profile/agreements", wrapper.GetProfileAgreements)
	router.POST(options.BaseURL+"/profile/agreements", wrapper.PostProfileAgreements)
	router.GET(options.BaseURL+"/profile/training", wrapper.GetProfileTraining)
	router.POST(options.BaseURL+"/profile/training", wrapper.PostProfileTraining)
	router.PUT(options.BaseURL+"/training/:userId/:trainingKind", wrapper.UpdateUserTrainingDate)
	router.GET(options.BaseURL+"/user/identity", wrapper.GetUserIdentity)
	router.POST(options.BaseURL+"/user/identity", wrapper.PostUserIdentity)
	router.GET(options.BaseURL+"/users", wrapper.GetAllUsers)
}
