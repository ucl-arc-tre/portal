// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from './client';
import type { GetAuthData, GetAuthResponses, GetAuthErrors, GetUserIdentityData, GetUserIdentityResponses, GetUserIdentityErrors, UpdateChosenNameData, UpdateChosenNameResponses, UpdateChosenNameErrors, GetProfileAgreementsData, GetProfileAgreementsResponses, GetProfileAgreementsErrors, PostProfileAgreementsData, PostProfileAgreementsResponses, PostProfileAgreementsErrors, GetTrainingRecordData, GetTrainingRecordResponses, GetTrainingRecordErrors, UpdateTrainingRecordData, UpdateTrainingRecordResponses, UpdateTrainingRecordErrors, GetAgreementsApprovedResearcherData, GetAgreementsApprovedResearcherResponses, GetAgreementsApprovedResearcherErrors, GetAllUsersData, GetAllUsersResponses, GetAllUsersErrors, UpdateTrainingValidityDateData, UpdateTrainingValidityDateResponses, UpdateTrainingValidityDateErrors, PostPeopleApprovedResearchersImportCsvData, PostPeopleApprovedResearchersImportCsvResponses, PostPeopleApprovedResearchersImportCsvErrors } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Authentication and authorization status of the user
 */
export const getAuth = <ThrowOnError extends boolean = false>(options?: Options<GetAuthData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAuthResponses, GetAuthErrors, ThrowOnError>({
        url: '/auth',
        ...options
    });
};

/**
 * User identity information (chosen name)
 */
export const getUserIdentity = <ThrowOnError extends boolean = false>(options?: Options<GetUserIdentityData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetUserIdentityResponses, GetUserIdentityErrors, ThrowOnError>({
        url: '/user/identity',
        ...options
    });
};

/**
 * Update user identity information (chosen name)
 */
export const updateChosenName = <ThrowOnError extends boolean = false>(options: Options<UpdateChosenNameData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UpdateChosenNameResponses, UpdateChosenNameErrors, ThrowOnError>({
        url: '/user/identity',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get all the agreements a user has agreed to
 */
export const getProfileAgreements = <ThrowOnError extends boolean = false>(options?: Options<GetProfileAgreementsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetProfileAgreementsResponses, GetProfileAgreementsErrors, ThrowOnError>({
        url: '/profile/agreements',
        ...options
    });
};

/**
 * Update the agreements for a user
 */
export const postProfileAgreements = <ThrowOnError extends boolean = false>(options: Options<PostProfileAgreementsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostProfileAgreementsResponses, PostProfileAgreementsErrors, ThrowOnError>({
        url: '/profile/agreements',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get the training record status for a user
 */
export const getTrainingRecord = <ThrowOnError extends boolean = false>(options: Options<GetTrainingRecordData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetTrainingRecordResponses, GetTrainingRecordErrors, ThrowOnError>({
        url: '/training/{userId}',
        ...options
    });
};

/**
 * Update the training record for a user
 */
export const updateTrainingRecord = <ThrowOnError extends boolean = false>(options: Options<UpdateTrainingRecordData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UpdateTrainingRecordResponses, UpdateTrainingRecordErrors, ThrowOnError>({
        url: '/training/{userId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get the latest approved researcher agreement
 */
export const getAgreementsApprovedResearcher = <ThrowOnError extends boolean = false>(options?: Options<GetAgreementsApprovedResearcherData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAgreementsApprovedResearcherResponses, GetAgreementsApprovedResearcherErrors, ThrowOnError>({
        url: '/agreements/approved-researcher',
        ...options
    });
};

/**
 * Get all the people a user has access to
 */
export const getAllUsers = <ThrowOnError extends boolean = false>(options?: Options<GetAllUsersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAllUsersResponses, GetAllUsersErrors, ThrowOnError>({
        url: '/users',
        ...options
    });
};

/**
 * Update a user's training record for a specific training kind
 */
export const updateTrainingValidityDate = <ThrowOnError extends boolean = false>(options: Options<UpdateTrainingValidityDateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateTrainingValidityDateResponses, UpdateTrainingValidityDateErrors, ThrowOnError>({
        url: '/training/{userId}/{trainingKind}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Upload a CSV file with fields
 * <username: string, e.g. "bob@example.com">,
 * <agreed to agreement: bool, e.g. true>,
 * <NHSD training completed at date: string, e.g. 2021-03-11>
 *
 */
export const postPeopleApprovedResearchersImportCsv = <ThrowOnError extends boolean = false>(options: Options<PostPeopleApprovedResearchersImportCsvData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostPeopleApprovedResearchersImportCsvResponses, PostPeopleApprovedResearchersImportCsvErrors, ThrowOnError>({
        bodySerializer: null,
        url: '/people/approved-researchers/import/csv',
        ...options,
        headers: {
            'Content-Type': 'text/csv',
            ...options.headers
        }
    });
};