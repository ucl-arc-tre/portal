// This file is auto-generated by @hey-api/openapi-ts

export type Auth = {
    username: string;
    roles: Array<'admin' | 'base' | 'approved-researcher'>;
};

export type Profile = {
    username: string;
    chosen_name: string;
};

export type ProfileUpdate = {
    chosen_name: string;
};

export type Agreement = {
    /**
     * UUID of the agreement
     */
    id: string;
    text: string;
};

export type AgreementConfirmation = {
    /**
     * UUID of the agreement that has been agreed to
     */
    agreement_id: string;
};

export type ConfirmedAgreement = {
    /**
     * Time in RFC3339 format at which the agreement was confirmed
     */
    confirmed_at: string;
    agreement_type: AgreementType;
};

export type AgreementType = 'approved-researcher' | 'study-owner';

export type UserAgreements = {
    confirmed_agreements: Array<ConfirmedAgreement>;
};

export type TrainingKind = 'training_kind_nhsd';

export type ProfileTrainingUpdate = {
    kind: TrainingKind;
    /**
     * Base64 encoded PDF file data of the certificate
     */
    certificate_content_pdf_base64?: string;
};

export type ProfileTrainingResponse = {
    /**
     * Is the certificate valid
     */
    certificate_is_valid?: boolean;
    /**
     * Reason why the training certificate is valid/invalid
     */
    certificate_message?: string;
    /**
     * Time in RFC3339 format at which the the certificate was issued
     */
    certificate_issued_at?: string;
};

export type TrainingRecord = {
    kind: TrainingKind;
    /**
     * Whether this training certification is currently valid
     */
    is_valid: boolean;
    /**
     * Time in RFC3339 format when the training was completed
     */
    completed_at?: string;
};

export type ProfileTraining = {
    /**
     * List of all training records for the user
     */
    training_records: Array<TrainingRecord>;
};

export type User = {
    username: string;
    id: string;
};

export type UserData = {
    user: User;
    roles: Array<string>;
    agreements: UserAgreements;
    training_record: ProfileTraining;
};

export type UserTrainingUpdate = {
    training_kind: TrainingKind;
    /**
     * Time in RFC3339 format at which the the certificate was issued
     */
    training_date: string;
};

/**
 * A data asset representing a set of related data entities
 */
export type Asset = {
    /**
     * Unique identifier for the asset
     */
    id: string;
    /**
     * Title of the asset
     */
    title: string;
    /**
     * Description of the asset
     */
    description: string;
    /**
     * Classification level of the asset
     */
    classification_impact: 'Public' | 'Confidential' | 'Highly confidential';
    /**
     * Storage locations and touchpoints for the asset
     */
    location: Array<string>;
    /**
     * Type of protection applied to the asset
     */
    protection: 'anonymisation' | 'identifiable_low_confidence_pseudonymisation';
    /**
     * Legal basis for holding the asset
     */
    legal_basis: string;
    /**
     * Format of the asset
     */
    format: string;
    /**
     * Retention expiry date of the asset
     */
    expiry: string;
    /**
     * Whether there is an up to date Data Security & Protection Toolkit in place
     */
    has_dspt: boolean;
    /**
     * Whether the asset is stored or processed outside UK and EEA
     */
    stored_outside_uk_eea: boolean;
    /**
     * Whether the asset is accessed by or governed by third parties
     */
    accessed_by_third_parties: boolean;
    /**
     * Third party agreement identifier if asset is governed by third parties
     */
    third_party_agreement?: string;
    /**
     * Status of the asset
     */
    status: 'Active' | 'Awaiting' | 'Destroyed';
    /**
     * Time in RFC3339 format when the asset was created
     */
    created_at: string;
    /**
     * Time in RFC3339 format when the asset was last updated
     */
    updated_at: string;
};

/**
 * Data required to create a new asset
 */
export type AssetCreate = {
    /**
     * Title of the asset
     */
    title: string;
    /**
     * Description of the asset
     */
    description: string;
    /**
     * Classification level of the asset
     */
    classification_impact: 'Public' | 'Confidential' | 'Highly confidential';
    /**
     * Storage locations and touchpoints for the asset
     */
    location: Array<string>;
    /**
     * Type of protection applied to the asset
     */
    protection: 'anonymisation' | 'identifiable_low_confidence_pseudonymisation';
    /**
     * Legal basis for holding the asset
     */
    legal_basis: string;
    /**
     * Format of the asset
     */
    format: string;
    /**
     * Retention expiry date of the asset
     */
    expiry: string;
    /**
     * Whether there is an up to date Data Security & Protection Toolkit in place
     */
    has_dspt: boolean;
    /**
     * Whether the asset is stored or processed outside UK and EEA
     */
    stored_outside_uk_eea: boolean;
    /**
     * Whether the asset is accessed by or governed by third parties
     */
    accessed_by_third_parties: boolean;
    /**
     * Third party agreement identifier if asset is governed by third parties
     */
    third_party_agreement?: string;
    /**
     * Status of the asset
     */
    status: 'Active' | 'Awaiting' | 'Destroyed';
};

export type GetAuthData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/auth';
};

export type GetAuthErrors = {
    /**
     * Unauthenticated
     */
    401: unknown;
    /**
     * Internal server error
     */
    500: unknown;
    /**
     * Unexpected error
     */
    default: unknown;
};

export type GetAuthResponses = {
    200: Auth;
};

export type GetAuthResponse = GetAuthResponses[keyof GetAuthResponses];

export type GetProfileData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/profile';
};

export type GetProfileErrors = {
    /**
     * Unexpected error
     */
    default: unknown;
};

export type GetProfileResponses = {
    200: Profile;
};

export type GetProfileResponse = GetProfileResponses[keyof GetProfileResponses];

export type PostProfileData = {
    body: ProfileUpdate;
    path?: never;
    query?: never;
    url: '/profile';
};

export type PostProfileErrors = {
    /**
     * Internal server error
     */
    500: unknown;
    /**
     * Unexpected error
     */
    default: unknown;
};

export type PostProfileResponses = {
    /**
     * Successfully updated profile
     */
    200: Profile;
};

export type PostProfileResponse = PostProfileResponses[keyof PostProfileResponses];

export type GetProfileAgreementsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/profile/agreements';
};

export type GetProfileAgreementsErrors = {
    /**
     * Internal server error
     */
    500: unknown;
    /**
     * Unexpected error
     */
    default: unknown;
};

export type GetProfileAgreementsResponses = {
    200: UserAgreements;
};

export type GetProfileAgreementsResponse = GetProfileAgreementsResponses[keyof GetProfileAgreementsResponses];

export type PostProfileAgreementsData = {
    body: AgreementConfirmation;
    path?: never;
    query?: never;
    url: '/profile/agreements';
};

export type PostProfileAgreementsErrors = {
    /**
     * Internal server error
     */
    500: unknown;
    /**
     * Unexpected error
     */
    default: unknown;
};

export type PostProfileAgreementsResponses = {
    200: UserAgreements;
};

export type PostProfileAgreementsResponse = PostProfileAgreementsResponses[keyof PostProfileAgreementsResponses];

export type GetProfileTrainingData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/profile/training';
};

export type GetProfileTrainingErrors = {
    /**
     * Internal server error
     */
    500: unknown;
    /**
     * Unexpected error
     */
    default: unknown;
};

export type GetProfileTrainingResponses = {
    200: ProfileTraining;
};

export type GetProfileTrainingResponse = GetProfileTrainingResponses[keyof GetProfileTrainingResponses];

export type PostProfileTrainingData = {
    body: ProfileTrainingUpdate;
    path?: never;
    query?: never;
    url: '/profile/training';
};

export type PostProfileTrainingErrors = {
    /**
     * Internal server error
     */
    500: unknown;
    /**
     * Unexpected error
     */
    default: unknown;
};

export type PostProfileTrainingResponses = {
    /**
     * Accepted
     */
    200: ProfileTrainingResponse;
};

export type PostProfileTrainingResponse = PostProfileTrainingResponses[keyof PostProfileTrainingResponses];

export type GetAgreementsByAgreementTypeData = {
    body?: never;
    path: {
        /**
         * Type of agreement to get
         */
        agreementType: AgreementType;
    };
    query?: never;
    url: '/agreements/{agreementType}';
};

export type GetAgreementsByAgreementTypeErrors = {
    /**
     * Not acceptable
     */
    406: unknown;
    /**
     * Internal server error
     */
    500: unknown;
    /**
     * Unexpected error
     */
    default: unknown;
};

export type GetAgreementsByAgreementTypeResponses = {
    200: Agreement;
};

export type GetAgreementsByAgreementTypeResponse = GetAgreementsByAgreementTypeResponses[keyof GetAgreementsByAgreementTypeResponses];

export type GetUsersData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/users';
};

export type GetUsersErrors = {
    /**
     * Forbidden
     */
    403: unknown;
    /**
     * Internal server error
     */
    500: unknown;
    /**
     * Unexpected error
     */
    default: unknown;
};

export type GetUsersResponses = {
    200: Array<UserData>;
};

export type GetUsersResponse = GetUsersResponses[keyof GetUsersResponses];

export type PostUsersByUserIdTrainingData = {
    body: UserTrainingUpdate;
    path: {
        /**
         * ID of the user to be updated
         */
        userId: string;
    };
    query?: never;
    url: '/users/{userId}/training';
};

export type PostUsersByUserIdTrainingErrors = {
    /**
     * Forbidden
     */
    403: unknown;
    /**
     * Not found
     */
    404: unknown;
    /**
     * Internal server error
     */
    500: unknown;
    /**
     * Unexpected error
     */
    default: unknown;
};

export type PostUsersByUserIdTrainingResponses = {
    /**
     * Successfully updated user
     */
    200: TrainingRecord;
};

export type PostUsersByUserIdTrainingResponse = PostUsersByUserIdTrainingResponses[keyof PostUsersByUserIdTrainingResponses];

export type PostUsersApprovedResearchersImportCsvData = {
    body: Blob | File;
    path?: never;
    query?: never;
    url: '/users/approved-researchers/import/csv';
};

export type PostUsersApprovedResearchersImportCsvErrors = {
    /**
     * Forbidden
     */
    403: unknown;
    /**
     * Internal server error
     */
    500: unknown;
    /**
     * Unexpected error
     */
    default: unknown;
};

export type PostUsersApprovedResearchersImportCsvResponses = {
    /**
     * OK
     */
    204: void;
};

export type PostUsersApprovedResearchersImportCsvResponse = PostUsersApprovedResearchersImportCsvResponses[keyof PostUsersApprovedResearchersImportCsvResponses];

export type GetStudiesByStudyIdAssetsData = {
    body?: never;
    path: {
        /**
         * ID of the study
         */
        studyId: string;
    };
    query?: never;
    url: '/studies/{studyId}/assets';
};

export type GetStudiesByStudyIdAssetsErrors = {
    /**
     * Forbidden
     */
    403: unknown;
    /**
     * Study not found
     */
    404: unknown;
    /**
     * Internal server error
     */
    500: unknown;
    /**
     * Unexpected error
     */
    default: unknown;
};

export type GetStudiesByStudyIdAssetsResponses = {
    200: Array<Asset>;
};

export type GetStudiesByStudyIdAssetsResponse = GetStudiesByStudyIdAssetsResponses[keyof GetStudiesByStudyIdAssetsResponses];

export type PostStudiesByStudyIdAssetsData = {
    body: AssetCreate;
    path: {
        /**
         * ID of the study
         */
        studyId: string;
    };
    query?: never;
    url: '/studies/{studyId}/assets';
};

export type PostStudiesByStudyIdAssetsErrors = {
    /**
     * Invalid request
     */
    400: unknown;
    /**
     * Forbidden
     */
    403: unknown;
    /**
     * Study not found
     */
    404: unknown;
    /**
     * Internal server error
     */
    500: unknown;
    /**
     * Unexpected error
     */
    default: unknown;
};

export type PostStudiesByStudyIdAssetsResponses = {
    /**
     * Asset created successfully
     */
    201: Asset;
};

export type PostStudiesByStudyIdAssetsResponse = PostStudiesByStudyIdAssetsResponses[keyof PostStudiesByStudyIdAssetsResponses];

export type ClientOptions = {
    baseUrl: `${string}://${string}/api/v0` | (string & {});
};