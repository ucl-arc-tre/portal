// This file is auto-generated by @hey-api/openapi-ts

export type Auth = {
    username: string;
    id: string;
    roles: Array<'admin' | 'base' | 'approved-researcher'>;
};

export type UserIdentityResponse = {
    username: string;
    chosen_name: string;
};

export type UserIdentity = {
    chosen_name: string;
};

export type Agreement = {
    /**
     * UUID of the agreement
     */
    id: string;
    text: string;
};

export type AgreementConfirmation = {
    /**
     * UUID of the agreement that has been agreed to
     */
    agreement_id: string;
};

export type ConfirmedAgreement = {
    /**
     * Time in RFC3339 format at which the agreement was confirmed
     */
    confirmed_at: string;
    agreement_type: AgreementType;
};

export type AgreementType = 'approved-researcher' | 'study-owner';

export type ProfileAgreements = {
    confirmed_agreements: Array<ConfirmedAgreement>;
};

export type TrainingKind = 'training_kind_nhsd';

export type UserTrainingUpdate = {
    kind: TrainingKind;
    /**
     * Base64 encoded PDF file data of the certificate
     */
    certificate_content_pdf_base64?: string;
};

export type UserTrainingResponse = {
    /**
     * Is the certificate valid
     */
    certificate_is_valid?: boolean;
    /**
     * Reason why the training certificate is valid/invalid
     */
    certificate_message?: string;
    /**
     * Time in RFC3339 format at which the the certificate was issued
     */
    certificate_issued_at?: string;
};

export type TrainingRecord = {
    kind: TrainingKind;
    /**
     * Whether this training certification is currently valid
     */
    is_valid: boolean;
    /**
     * Time in RFC3339 format when the training was completed
     */
    completed_at?: string;
};

export type UserTrainingStatus = {
    /**
     * List of all training records for the user
     */
    training_records: Array<TrainingRecord>;
};

export type User = {
    username: string;
    id: string;
};

export type Person = {
    user: User;
    roles: Array<string>;
    agreements: ProfileAgreements;
    training_record: UserTrainingStatus;
};

export type TrainingValidFromDate = {
    /**
     * Time in RFC3339 format representing the date from which the training is valid
     */
    training_valid_from_date: string;
};

export type People = Array<Person>;

export type GetAuthData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/auth';
};

export type GetAuthErrors = {
    /**
     * Unauthenticated
     */
    401: unknown;
    /**
     * Internal server error
     */
    500: unknown;
    /**
     * Unexpected error
     */
    default: unknown;
};

export type GetAuthResponses = {
    200: Auth;
};

export type GetAuthResponse = GetAuthResponses[keyof GetAuthResponses];

export type GetUserIdentityData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/user/identity';
};

export type GetUserIdentityErrors = {
    /**
     * Unexpected error
     */
    default: unknown;
};

export type GetUserIdentityResponses = {
    200: UserIdentityResponse;
};

export type GetUserIdentityResponse = GetUserIdentityResponses[keyof GetUserIdentityResponses];

export type UpdateChosenNameData = {
    body: UserIdentity;
    path?: never;
    query?: never;
    url: '/user/identity';
};

export type UpdateChosenNameErrors = {
    /**
     * Internal server error
     */
    500: unknown;
    /**
     * Unexpected error
     */
    default: unknown;
};

export type UpdateChosenNameResponses = {
    /**
     * Successfully updated user identity
     */
    200: UserIdentityResponse;
};

export type UpdateChosenNameResponse = UpdateChosenNameResponses[keyof UpdateChosenNameResponses];

export type GetProfileAgreementsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/profile/agreements';
};

export type GetProfileAgreementsErrors = {
    /**
     * Internal server error
     */
    500: unknown;
    /**
     * Unexpected error
     */
    default: unknown;
};

export type GetProfileAgreementsResponses = {
    200: ProfileAgreements;
};

export type GetProfileAgreementsResponse = GetProfileAgreementsResponses[keyof GetProfileAgreementsResponses];

export type PostProfileAgreementsData = {
    body: AgreementConfirmation;
    path?: never;
    query?: never;
    url: '/profile/agreements';
};

export type PostProfileAgreementsErrors = {
    /**
     * Internal server error
     */
    500: unknown;
    /**
     * Unexpected error
     */
    default: unknown;
};

export type PostProfileAgreementsResponses = {
    200: ProfileAgreements;
};

export type PostProfileAgreementsResponse = PostProfileAgreementsResponses[keyof PostProfileAgreementsResponses];

export type GetTrainingRecordData = {
    body?: never;
    path: {
        /**
         * ID of the user whose training records to retrieve
         */
        userId: string;
    };
    query?: never;
    url: '/training/{userId}';
};

export type GetTrainingRecordErrors = {
    /**
     * Internal server error
     */
    500: unknown;
    /**
     * Unexpected error
     */
    default: unknown;
};

export type GetTrainingRecordResponses = {
    200: UserTrainingStatus;
};

export type GetTrainingRecordResponse = GetTrainingRecordResponses[keyof GetTrainingRecordResponses];

export type UpdateTrainingRecordData = {
    body: UserTrainingUpdate;
    path: {
        /**
         * ID of the user whose training record to update
         */
        userId: string;
    };
    query?: never;
    url: '/training/{userId}';
};

export type UpdateTrainingRecordErrors = {
    /**
     * Internal server error
     */
    500: unknown;
    /**
     * Unexpected error
     */
    default: unknown;
};

export type UpdateTrainingRecordResponses = {
    /**
     * Accepted
     */
    200: UserTrainingResponse;
};

export type UpdateTrainingRecordResponse = UpdateTrainingRecordResponses[keyof UpdateTrainingRecordResponses];

export type GetAgreementsApprovedResearcherData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/agreements/approved-researcher';
};

export type GetAgreementsApprovedResearcherErrors = {
    /**
     * Not acceptable
     */
    406: unknown;
    /**
     * Internal server error
     */
    500: unknown;
    /**
     * Unexpected error
     */
    default: unknown;
};

export type GetAgreementsApprovedResearcherResponses = {
    200: Agreement;
};

export type GetAgreementsApprovedResearcherResponse = GetAgreementsApprovedResearcherResponses[keyof GetAgreementsApprovedResearcherResponses];

export type GetAllUsersData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/users';
};

export type GetAllUsersErrors = {
    /**
     * Forbidden
     */
    403: unknown;
    /**
     * Internal server error
     */
    500: unknown;
    /**
     * Unexpected error
     */
    default: unknown;
};

export type GetAllUsersResponses = {
    200: People;
};

export type GetAllUsersResponse = GetAllUsersResponses[keyof GetAllUsersResponses];

export type UpdateTrainingValidityDateData = {
    body: TrainingValidFromDate;
    path: {
        /**
         * ID of the user whose training record should be updated
         */
        userId: string;
        /**
         * The kind of training to update
         */
        trainingKind: TrainingKind;
    };
    query?: never;
    url: '/training/{userId}/{trainingKind}';
};

export type UpdateTrainingValidityDateErrors = {
    /**
     * Forbidden
     */
    403: unknown;
    /**
     * Not found
     */
    404: unknown;
    /**
     * Internal server error
     */
    500: unknown;
    /**
     * Unexpected error
     */
    default: unknown;
};

export type UpdateTrainingValidityDateResponses = {
    /**
     * Successfully updated training record
     */
    200: TrainingRecord;
};

export type UpdateTrainingValidityDateResponse = UpdateTrainingValidityDateResponses[keyof UpdateTrainingValidityDateResponses];

export type PostPeopleApprovedResearchersImportCsvData = {
    body: Blob | File;
    path?: never;
    query?: never;
    url: '/people/approved-researchers/import/csv';
};

export type PostPeopleApprovedResearchersImportCsvErrors = {
    /**
     * Forbidden
     */
    403: unknown;
    /**
     * Internal server error
     */
    500: unknown;
    /**
     * Unexpected error
     */
    default: unknown;
};

export type PostPeopleApprovedResearchersImportCsvResponses = {
    /**
     * OK
     */
    204: void;
};

export type PostPeopleApprovedResearchersImportCsvResponse = PostPeopleApprovedResearchersImportCsvResponses[keyof PostPeopleApprovedResearchersImportCsvResponses];

export type ClientOptions = {
    baseUrl: `${string}://${string}/api/v0` | (string & {});
};